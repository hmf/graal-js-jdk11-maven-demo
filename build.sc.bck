// build.sc
import mill._, scalalib._

trait JUnitTests extends TestModule {
  def testFrameworks = Seq("com.novocode.junit.JUnitFramework")
  def ivyDeps = Agg(ivy"com.novocode:junit-interface:0.11")
}

object jarpath extends ScalaModule {

  override def scalaVersion = "2.13.1"

  override def ivyDeps = Agg(
    ivy"io.get-coursier::coursier:2.0.0-RC3-4"
  )
}

/*
  Notes:
    - To retain the original set-up we need to override Mill's defaults
        . def millSourcePath = super.millSourcePath / os.up.
    See example: https://github.com/lihaoyi/mill/blob/master/integration/test/resources/caffeine/build.sc
    See https://github.com/lihaoyi/mill/blob/master/scalalib/src/MiscModule.scala
 */
object graaljs extends JavaModule {
  //def mainClass = Some("com.mycompany.app.App")

  lazy val graalvmVersion = "19.2.0.1"
  lazy val junitVersion = "4.12"

  override def ivyDeps = Agg(
    ivy"org.graalvm.sdk:graal-sdk:$graalvmVersion",
    ivy"org.graalvm.js:js:$graalvmVersion",
    ivy"org.graalvm.js:js-scriptengine:$graalvmVersion",
    ivy"org.graalvm.tools:profiler:$graalvmVersion",
    ivy"org.graalvm.tools:chromeinspector:$graalvmVersion"
  )

  // https://github.com/lefou/mill-aspectj/blob/master/aspectj/src/de/tobiasroeser/mill/aspectj/AspectjModule.scala#L47
  // https://weekly-geekly.github.io/articles/445978/index.html

  def graalToolsDeps: T[Agg[Dep]] = T {
    Agg(
      ivy"org.graalvm.compiler:compiler:${graalvmVersion}",    // compiler.jar
      ivy"org.graalvm.truffle:truffle-api:${graalvmVersion}",  // truffle-api.jar
      ivy"org.graalvm.sdk:graal-sdk:${graalvmVersion}"         // graal-sdk.jar
    )
  }

  def graalToolsClasspath: T[Agg[PathRef]] = T {
    resolveDeps(graalToolsDeps)
  }


  def getCompilerPath(paths:Seq[java.io.File]): String = {
    val compilerPath = paths.find{ f =>
      f.getAbsolutePath.matches(".+compiler.+\\.jar")
    }

    compilerPath match {
      case Some(path) =>
        if (path.isFile) {
          println("Is a file ------------------- ")
          println(s"path.getParent = ${path.getParent}")
          println(s"path.getAbsolutePath = ${path.getAbsolutePath}")
          path.getAbsolutePath
        }
        else
          throw new RuntimeException("Graal compiler path incorrect.")

      case None =>
        throw new RuntimeException("Graal compiler not found.")
    }
  }

  def fetch(): String = {
    import coursier._
    import coursier.cache._

    val files = Fetch()
      .addDependencies(dep"org.graalvm.compiler:compiler:19.2.0.1")
      .run()
    val path = getCompilerPath(files)
    path
  }

  lazy val compilerDir = fetch()

  /*
  def unmanagedClasspath = T {
    println(s"millSourcePath ===================== ${millSourcePath / os.up}")
    val tmp = if (!ammonite.ops.exists(millSourcePath / os.up / "target" / "compiler")) throw new RuntimeException("unmanaged") //Agg()
    else Agg.from(ammonite.ops.ls(millSourcePath / os.up / "target" / "compiler").map(PathRef(_)))
    println(tmp)
    tmp
  }*/

  def mdocClasspath: T[Agg[PathRef]] = T {
    // Same as runClasspath but with mdoc added to ivyDeps from the start
    // This prevents duplicate, differently versioned copies of scala-library
    // ending up on the classpath which can happen when resolving separately
    transitiveLocalClasspath() ++
      resources() ++
      localClasspath() ++
      unmanagedClasspath() /*++
      graalToolsClasspath()*/
  }

  /*
  def runClasspath = T{
    localClasspath() ++
      upstreamAssemblyClasspath() ++
    unmanagedClasspath()
    //transitiveLocalClasspath() //++
      //Agg(compile().classes) ++
      //resources() ++
      //ammonite.ops.ls(millSourcePath / os.up / "target" / "compiler").map(PathRef(_)) ++
      //resolveDeps(T.task{runIvyDeps() ++ transitiveIvyDeps()})()
  }
  */


  // The return value of the JavaModule.resolveDeps task is a Agg[PathRef]. PathRef.path gives you the path of the resolved JAR file(s)
  // mill -i show graaljs.test.runClasspath | grep -i graal
  //  mill -i show graaljs.test.runClasspath
  /*
  Error occurred during initialization of boot layer
  java.lang.module.FindException: Module org.graalvm.truffle not found, required by jdk.internal.vm.compiler
   */
  /*
   Test com.mycompany.app.AppTest.testGraalPolyglotSpeed failed: java.lang.IllegalStateException: No language and polyglot implementation was found on the classpath. Make sure the truffle-api.jar is on the classpath., took 0.005 sec
   */
  // locate -i graal | grep -i jar
  /*
/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/compiler.jar
/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/graal-sdk.jar
/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/truffle-api.jar
   */

  /*
  cat target/modulepath
    /home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/classes:/home/hmf/.m2/repository/org/graalvm/sdk/graal-sdk/19.2.0/graal-sdk-19.2.0.jar:/home/hmf/.m2/repository/org/graalvm/js/js/19.2.0/js-19.2.0.jar:/home/hmf/.m2/repository/org/graalvm/regex/regex/19.2.0/regex-19.2.0.jar:/home/hmf/.m2/repository/org/graalvm/truffle/truffle-api/19.2.0/truffle-api-19.2.0.jar:/home/hmf/.m2/repository/org/ow2/asm/asm/6.2.1/asm-6.2.1.jar:/home/hmf/.m2/repository/org/ow2/asm/asm-tree/6.2.1/asm-tree-6.2.1.jar:/home/hmf/.m2/repository/org/ow2/asm/asm-analysis/6.2.1/asm-analysis-6.2.1.jar:/home/hmf/.m2/repository/org/ow2/asm/asm-commons/6.2.1/asm-commons-6.2.1.jar:/home/hmf/.m2/repository/org/ow2/asm/asm-util/6.2.1/asm-util-6.2.1.jar:/home/hmf/.m2/repository/com/ibm/icu/icu4j/62.1/icu4j-62.1.jar:/home/hmf/.m2/repository/org/graalvm/js/js-scriptengine/19.2.0/js-scriptengine-19.2.0.jar:/home/hmf/.m2/repository/org/graalvm/tools/profiler/19.2.0/profiler-19.2.0.jar:/home/hmf/.m2/repository/org/graalvm/tools/chromeinspector/19.2.0/chromeinspector-19.2.0.jar

   */

  /*
  mill -i inspect graaljs.test.run

 "-XX:+UnlockExperimentalVMOptions",
    "-XX:+EnableJVMCI",
    "--module-path=/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler",
    "--upgrade-module-path=/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/compiler.jar"

java -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler -Diterations=10 --module-path=target/lib --upgrade-module-path=target/lib/compiler-1.0.0-rc14.jar -jar target/my-app-1.0-SNAPSHOT.jar

export CLASSES=/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/graaljs/test/resources:/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/out/graaljs/test/compile/dest/classes:/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/graaljs/resources:/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/out/graaljs/compile/dest/classes:/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/compiler.jar:/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/graal-sdk.jar:/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/truffle-api.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/graalvm/regex/regex/19.2.0.1/regex-19.2.0.1.jar:167581e7:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/graalvm/js/js/19.2.0.1/js-19.2.0.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/com/novocode/junit-interface/0.11/junit-interface-0.11.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm-commons/6.2.1/asm-commons-6.2.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-sbt/test-interface/1.0/test-interface-1.0.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/graalvm/truffle/truffle-api/19.2.0.1/truffle-api-19.2.0.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm-analysis/6.2.1/asm-analysis-6.2.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm-tree/6.2.1/asm-tree-6.2.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/graalvm/js/js-scriptengine/19.2.0.1/js-scriptengine-19.2.0.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/graalvm/tools/chromeinspector/19.2.0.1/chromeinspector-19.2.0.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/6.2.1/asm-6.2.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/graalvm/tools/profiler/19.2.0.1/profiler-19.2.0.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/com/ibm/icu/icu4j/62.1/icu4j-62.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/graalvm/sdk/graal-sdk/19.2.0.1/graal-sdk-19.2.0.1.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/junit/junit/4.12/junit-4.12.jar:/home/hmf/.cache/coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm-util/6.2.1/asm-util-6.2.1.jar
java -classpath $CLASSES -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler --module-path=/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler --upgrade-module-path=/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/compiler.jar com.mycompany.app.App

   */

  lazy val graalArgs = T {
    val libPaths: String = mdocClasspath().map(_.path.toIO.getAbsolutePath).mkString(java.io.File.pathSeparator)
    println(s"libPaths = $libPaths  ??????????????????????????????")
    //val tmp = "/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/compiler.jar:/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/graal-sdk.jar:/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/truffle-api.jar"
    val tmp = "/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler"
    Seq(
    "-XX:+UnlockExperimentalVMOptions",
    "-XX:+EnableJVMCI",
    // TODO: s"--module-path=${compilerDir}",
    //s"--module-path=$libPaths",
    s"--module-path=$tmp",
    //s"--upgrade-module-path=${compilerDir}/compiler.jar"
    //s"--upgrade-module-path=$compilerDir"
      s"--upgrade-module-path=/home/hmf/IdeaProjects/graal-js-jdk11-maven-demo/target/compiler/compiler.jar"
    )
  }


  override def forkArgs = graalArgs

  //def forkEnv = Map("HELLO_MY_ENV_VAR" -> "WORLD")

  object test extends Tests with JUnitTests {

    def unmanagedClasspath = T {
      println(s"millSourcePath ===================== ${millSourcePath / os.up / os.up}")
      val tmp = if (!ammonite.ops.exists(millSourcePath / os.up / os.up / "target" / "compiler")) throw new RuntimeException("unmanaged") //Agg()
      else Agg.from(ammonite.ops.ls(millSourcePath / os.up / os.up / "target" / "compiler").map(PathRef(_)))
      println(tmp)
      tmp
    }

    // Seems we don't need JUnit deps
    override def ivyDeps = super.ivyDeps() ++ Agg(ivy"junit:junit:${junitVersion}") ++
      Agg(
        ivy"org.graalvm.sdk:graal-sdk:$graalvmVersion",
        ivy"org.graalvm.js:js:$graalvmVersion",
        ivy"org.graalvm.js:js-scriptengine:$graalvmVersion",
        ivy"org.graalvm.tools:profiler:$graalvmVersion",
        ivy"org.graalvm.tools:chromeinspector:$graalvmVersion"
      )
    override def forkArgs = graalArgs
  }

}
